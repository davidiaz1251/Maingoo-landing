---
---

<script>
  import municipiosData from '../data/municipios_spain.json';

  interface Town {
    label: string;
    code?: string;
    parent_code?: string;
  }

  interface Province {
    label: string;
    code: string;
    parent_code: string;
    towns: Town[];
  }

  interface Region {
    label: string;
    code: string;
    parent_code: string;
    provinces: Province[];
  }
  import emailjs from '@emailjs/browser';
  import { parsePhoneNumber, AsYouType, getCountries, getCountryCallingCode, getExampleNumber } from 'libphonenumber-js/max';
  import type { CountryCode } from 'libphonenumber-js';
  import examples from 'libphonenumber-js/examples.mobile.json' assert { type: 'json' };
  
  // Función para normalizar texto (eliminar tildes y convertir a minúsculas)
  const normalizeText = (text: string): string => {
    return text.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
  };

  const initForm = () => {
    try {
      emailjs.init("aPPNoh3Ouq2xOXzLa");
    } catch (error) {
      console.error('Error al inicializar EmailJS:', error);
    }

    const form = document.getElementById('contact-form') as HTMLFormElement;
    const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
    const phoneInput = document.getElementById('phone-input') as HTMLInputElement;
    const countrySelect = document.getElementById('country-code') as HTMLSelectElement;
    const messageInput = document.getElementById('message-input') as HTMLTextAreaElement;
    const charCounter = document.getElementById('char-counter') as HTMLDivElement;
    const businessTypeSelect = document.getElementById('business-type-select') as HTMLSelectElement;
    const otherBusinessTypeDiv = document.getElementById('other-business-type-div') as HTMLDivElement;
    const otherBusinessTypeInput = document.getElementById('other-business-type') as HTMLInputElement;
    const locationInput = document.getElementById('location-input') as HTMLInputElement;
    let hasAttemptedSubmit = false;
    if (!form || !submitButton || !phoneInput || !countrySelect || !messageInput || !charCounter || !businessTypeSelect || !otherBusinessTypeDiv || !otherBusinessTypeInput || !locationInput) {
      console.error('No se encontraron los elementos necesarios del formulario');
      return;
    }

    // Configurar búsqueda de municipios

    // Crear elemento para resultados de búsqueda
    const locationResults = document.createElement('div');
    locationResults.className = 'absolute w-full mt-1 max-h-60 overflow-y-auto rounded-lg bg-black/80 backdrop-blur-sm z-10';
    locationInput.parentNode?.appendChild(locationResults);

    // Función para buscar municipios
    const searchLocation = (searchTerm: string) => {
      locationResults.innerHTML = '';
      if (!searchTerm) {
        locationResults.classList.add('hidden');
        return;
      }

      const normalizedSearch = normalizeText(searchTerm);
      const results: { label: string; type: 'municipio' | 'provincia'; original: string }[] = [];

      // Buscar en todos los municipios
      municipiosData.forEach((comunidad: Region) => {
        comunidad.provinces.forEach((province: Province) => {
          province.towns.forEach((town: Town) => {
            const normalizedTown = normalizeText(town.label);
            if (normalizedTown.includes(normalizedSearch)) {
              results.push({
                label: `${town.label} (${province.label})`,
                type: 'municipio',
                original: town.label
              });
            }
          });
        });
      });

      // Ordenar resultados: primero municipios que empiezan con el término, luego los que lo contienen
      results.sort((a, b) => {
        const aStartsWith = normalizeText(a.original).startsWith(normalizedSearch);
        const bStartsWith = normalizeText(b.original).startsWith(normalizedSearch);
        if (aStartsWith && !bStartsWith) return -1;
        if (!aStartsWith && bStartsWith) return 1;
        return a.label.localeCompare(b.label);
      });

      // Mostrar resultados
      if (results.length > 0) {
        results.slice(0, 10).forEach(result => {
          const div = document.createElement('div');
          div.className = 'px-4 py-2 cursor-pointer hover:bg-white/10 text-white';
          div.textContent = result.label;
          div.addEventListener('click', () => {
            locationInput.value = result.label;
            locationResults.classList.add('hidden');
          });
          locationResults.appendChild(div);
        });
        locationResults.classList.remove('hidden');
      } else {
        locationResults.classList.add('hidden');
      }
    };

    // Eventos para el campo de ubicación
    locationInput.addEventListener('input', (e) => {
      const target = e.target as HTMLInputElement;
      searchLocation(target.value);
    });

    // Cerrar resultados al hacer clic fuera
    document.addEventListener('click', (e) => {
      if (!locationInput.contains(e.target as Node)) {
        locationResults.classList.add('hidden');
      }
    });

    // Manejar la visibilidad del campo "otro tipo de negocio"
    const handleBusinessTypeChange = () => {
      if (businessTypeSelect.value === 'otro') {
        otherBusinessTypeDiv.classList.remove('hidden');
        otherBusinessTypeInput.required = true;
      } else {
        otherBusinessTypeDiv.classList.add('hidden');
        otherBusinessTypeInput.required = false;
        otherBusinessTypeInput.value = '';
      }
    };

    businessTypeSelect.addEventListener('change', handleBusinessTypeChange);

    // Función para actualizar el contador de caracteres
    const updateCharCounter = () => {
      const length = messageInput.value.length;
      charCounter.textContent = `${length}/500`;
      // Cambiar el color cuando se acerca al límite
      if (length >= 450) {
        charCounter.classList.add('text-yellow-300');
      } else {
        charCounter.classList.remove('text-yellow-300');
      }
    };

    // Evento para actualizar el contador
    messageInput.addEventListener('input', updateCharCounter);

    // Función para obtener el número máximo de dígitos para un país
    const getMaxLengthForCountry = (countryCode: CountryCode): number => {
      try {
        const example = getExampleNumber(countryCode, examples);
        if (example) {
          // Obtener solo los dígitos del número de ejemplo
          return example.nationalNumber.toString().length;
        }
      } catch (error) {
        console.error(`Error al obtener ejemplo para ${countryCode}:`, error);
      }
      return 15; // Longitud máxima por defecto si no se puede determinar
    };

    // Limpiar el select por si ya tenía opciones
    countrySelect.innerHTML = '';

    // Inicializar el selector de países
    const countries = getCountries();
    const commonCountries = ['ES', 'PT', 'FR', 'IT', 'GB', 'DE'] as CountryCode[];
    const otherCountries = countries.filter(c => !commonCountries.includes(c as CountryCode));
    
    // Función para crear una opción del selector
    const createCountryOption = (countryCode: string, isCommon = false) => {
      try {
        const callingCode = getCountryCallingCode(countryCode as CountryCode);
        const option = document.createElement('option');
        option.value = countryCode;
        option.textContent = `+${callingCode}`;
        if (isCommon && countryCode === 'ES') {
          option.selected = true;
        }
        return option;
      } catch (error) {
        console.error(`Error al crear opción para ${countryCode}:`, error);
        return null;
      }
    };
    
    // Agregar países comunes al principio
    commonCountries.forEach(countryCode => {
      const option = createCountryOption(countryCode, true);
      if (option) countrySelect.appendChild(option);
    });

    // Agregar separador
    const separator = document.createElement('option');
    separator.disabled = true;
    separator.textContent = '──────';
    countrySelect.appendChild(separator);

    // Agregar resto de países
    otherCountries.sort().forEach(countryCode => {
      const option = createCountryOption(countryCode);
      if (option) countrySelect.appendChild(option);
    });

    // Actualizar el maxLength del input cuando cambie el país
    const updatePhoneInputMaxLength = () => {
      const countryCode = countrySelect.value as CountryCode;
      const maxLength = getMaxLengthForCountry(countryCode);
      phoneInput.maxLength = maxLength;
    };

    // Formatear número de teléfono mientras se escribe
    const formatPhoneNumber = () => {
      const countryCode = countrySelect.value as CountryCode;
      const asYouType = new AsYouType(countryCode);
      let formatted = asYouType.input(phoneInput.value);
      
      // Validar y limitar la longitud según el país
      try {
        const phoneNumber = parsePhoneNumber(formatted, { defaultCountry: countryCode });
        if (phoneNumber) {
          const nationalNumber = phoneNumber.nationalNumber;
          const maxLength = getMaxLengthForCountry(countryCode);
          
          if (nationalNumber.toString().length > maxLength) {
            // Si excede la longitud máxima, truncar el número
            formatted = new AsYouType(countryCode).input(nationalNumber.toString().slice(0, maxLength));
          }
        }
      } catch (error) {
        // Si hay un error al parsear, mantener el valor formateado actual
      }
      
      phoneInput.value = formatted;
    };

    phoneInput.addEventListener('input', formatPhoneNumber);
    countrySelect.addEventListener('change', () => {
      updatePhoneInputMaxLength();
      formatPhoneNumber();
    });

    // Inicializar maxLength para el país por defecto
    updatePhoneInputMaxLength();

    const validateField = (field: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement): boolean => {
      let fieldIsValid = true;

      if (field instanceof HTMLInputElement && field.type === 'checkbox') {
        fieldIsValid = field.checked;
      } else if (field instanceof HTMLSelectElement) {
        fieldIsValid = field.value !== '';
      } else {
        fieldIsValid = field.value.trim() !== '';
      }
      
      // Validación específica para el teléfono
      if (field.id === 'phone-input' && field.value.trim() !== '') {
        try {
          const phoneNumber = parsePhoneNumber(field.value, { defaultCountry: countrySelect.value as CountryCode });
          fieldIsValid = phoneNumber.isValid();
        } catch (error) {
          fieldIsValid = false;
        }
      }

      // Validación específica para el email
      if (field.type === 'email' && field.value.trim() !== '') {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(field.value)) {
          fieldIsValid = false;
        }
      }

      // Aplicar estilos de validación
      if (hasAttemptedSubmit) {
        if (!fieldIsValid) {
          field.classList.add('border-red-500', 'bg-red-50/10');
          field.classList.remove('border-white/30', 'dark:border-white/20');
        } else {
          field.classList.remove('border-red-500', 'bg-red-50/10');
          field.classList.add('border-white/30', 'dark:border-white/20');
        }
      }

      return fieldIsValid;
    };

    const validateForm = (): boolean => {
      const requiredFields = form.querySelectorAll<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>('[required]');
      let isValid = true;
      
      requiredFields.forEach(field => {
        if (!validateField(field)) {
          isValid = false;
        }
      });
      
      return isValid;
    };

    const handleSubmit = async (e: SubmitEvent) => {
      e.preventDefault();
      hasAttemptedSubmit = true;

      const isValid = validateForm();
      if (!isValid) {
        return;
      }

      submitButton.textContent = 'Enviando...';

      try {
        // Ocultar alertas anteriores
        document.getElementById('success-alert')?.classList.add('hidden');
        document.getElementById('error-alert')?.classList.add('hidden');

        const formData = new FormData(form);
        // Formatear el número de teléfono completo con el código de país
        const phoneNumber = parsePhoneNumber(phoneInput.value, { defaultCountry: countrySelect.value as CountryCode });
        formData.set('phone', phoneNumber.format('INTERNATIONAL'));

        // Agregar el tipo de negocio específico si se seleccionó "otro"
        if (businessTypeSelect.value === 'otro' && otherBusinessTypeInput.value) {
          formData.set('business_type', `Otro: ${otherBusinessTypeInput.value}`);
        }

        await emailjs.send(
          "service_4nvrynj",
          "template_tkal5o8",
          Object.fromEntries(formData)
        );

        form.reset();
        hasAttemptedSubmit = false;
        updateCharCounter(); // Actualizar el contador después de resetear el formulario
        handleBusinessTypeChange(); // Resetear el campo de otro tipo de negocio
        document.getElementById('success-alert')?.classList.remove('hidden');
        setTimeout(() => {
          document.getElementById('success-alert')?.classList.add('hidden');
        }, 5000);
      } catch (error) {
        console.error('Error al enviar el formulario:', error);
        document.getElementById('error-alert')?.classList.remove('hidden');
        setTimeout(() => {
          document.getElementById('error-alert')?.classList.add('hidden');
        }, 5000);
      } finally {
        submitButton.textContent = 'Enviar Mensaje';
      }
    };

    form.addEventListener('submit', handleSubmit);
  };

  // Inicializar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initForm);
  } else {
    initForm();
  }
</script>

<section id="contact" class="relative pt-16 pb-16 bg-gradient-to-br from-blue-600 via-purple-600 to-indigo-700 text-white">
  <div class="container mx-auto px-6">
    <div class="max-w-4xl mx-auto text-center">
      <!-- Main CTA -->
      <h2 class="text-2xl md:text-4xl mb-12 font-bold">
        ¡(R)evoluciona tu negocio!<br>
        Únete gratis a la beta de Maingoo
      </h2>

      <!-- Alerts -->
      <div id="success-alert" class="hidden fixed top-4 right-4 bg-green-500 text-white px-6 py-4 rounded-lg shadow-lg z-50 transform transition-all duration-300 ease-in-out">
        <div class="flex items-center space-x-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
          <p class="font-medium">¡Mensaje enviado con éxito!</p>
        </div>
      </div>

      <div id="error-alert" class="hidden fixed top-4 right-4 bg-red-500 text-white px-6 py-4 rounded-lg shadow-lg z-50 transform transition-all duration-300 ease-in-out">
        <div class="flex items-center space-x-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
          <p class="font-medium">Error al enviar el mensaje. Por favor, intenta nuevamente.</p>
        </div>
      </div>

      <!-- Contact Form -->
      <div class="bg-white/10 dark:bg-black/20 backdrop-blur-sm rounded-2xl p-8 max-w-2xl mx-auto">
        <h3 class="text-2xl font-bold mb-6">Solicitar Acceso a la Beta</h3>
        <form id="contact-form" class="space-y-6" novalidate>
          <input type="hidden" name="subject" value="Nuevo contacto desde Maingoo Landing" />
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <input 
                name="from_name"
                type="text" 
                placeholder="Nombre completo"
                required
                maxlength="80"
                class="w-full px-4 py-3 rounded-lg bg-white/20 dark:bg-white/10 border border-white/30 dark:border-white/20 text-white placeholder-white/70 dark:placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 dark:focus:ring-white/40 transition-colors duration-200"
              />
            </div>
            <div>
              <input 
                name="from_email"
                type="email" 
                placeholder="Email"
                required
                maxlength="100"
                class="w-full px-4 py-3 rounded-lg bg-white/20 dark:bg-white/10 border border-white/30 dark:border-white/20 text-white placeholder-white/70 dark:placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 dark:focus:ring-white/40 transition-colors duration-200"
              />
            </div>
            <div class="flex gap-2">
              <select
                id="country-code"
                name="country_code"
                required
                class="w-16 px-2 py-3 rounded-lg bg-white/20 dark:bg-white/10 border border-white/30 dark:border-white/20 text-white focus:outline-none focus:ring-2 focus:ring-white/50 dark:focus:ring-white/40 transition-colors duration-200 text-sm"
              >
                <!-- Se llenará con JavaScript -->
              </select>
              <input 
                id="phone-input"
                name="phone"
                type="tel" 
                placeholder="Número de teléfono"
                required
                class="flex-1 px-4 py-3 rounded-lg bg-white/20 dark:bg-white/10 border border-white/30 dark:border-white/20 text-white placeholder-white/70 dark:placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 dark:focus:ring-white/40 transition-colors duration-200"
              />
            </div>
            <div class="relative">
              <input 
                id="location-input"
                name="location"
                type="text" 
                placeholder="Ubicación del negocio"
                required
                maxlength="100"
                class="w-full px-4 py-3 rounded-lg bg-white/20 dark:bg-white/10 border border-white/30 dark:border-white/20 text-white placeholder-white/70 dark:placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 dark:focus:ring-white/40 transition-colors duration-200"
              />
            </div>
          </div>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div>
              <select 
                id="business-type-select"
                name="business_type"
                required
                class="w-full px-4 py-3 rounded-lg bg-white/20 dark:bg-white/10 border border-white/30 dark:border-white/20 text-white focus:outline-none focus:ring-2 focus:ring-white/50 dark:focus:ring-white/40 transition-colors duration-200"
              >
                <option value="" class="text-gray-800">Tipo de negocio</option>
                <option value="bar" class="text-gray-800">Bar</option>
                <option value="restaurante" class="text-gray-800">Restaurante</option>
                <option value="otro" class="text-gray-800">Otro</option>
              </select>
              <div id="other-business-type-div" class="hidden mt-2">
                <input 
                  id="other-business-type"
                  name="other_business_type"
                  type="text"
                  placeholder="Especifica tu tipo de negocio"
                  maxlength="100"
                  class="w-full px-4 py-3 rounded-lg bg-white/20 dark:bg-white/10 border border-white/30 dark:border-white/20 text-white placeholder-white/70 dark:placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 dark:focus:ring-white/40 transition-colors duration-200"
                />
              </div>
            </div>
            <div>
              <select 
                name="restaurant_size"
                required
                class="w-full px-4 py-3 rounded-lg bg-white/20 dark:bg-white/10 border border-white/30 dark:border-white/20 text-white focus:outline-none focus:ring-2 focus:ring-white/50 dark:focus:ring-white/40 transition-colors duration-200"
              >
                <option value="" class="text-gray-800">Número de negocios</option>
                <option value="1 ubicacion" class="text-gray-800">1 ubicación</option>
                <option value="2 ubicaciones" class="text-gray-800">2 ubicaciones</option>
                <option value="3+ ubicaciones" class="text-gray-800">3+ ubicaciones</option>
              </select>
            </div>
          </div>
          <div>
            <div class="relative">
              <textarea 
                name="message"
                id="message-input"
                placeholder="Cuéntanos sobre tu negocio y cómo crees que podemos ayudarte"
                rows="4"
                required
                maxlength="500"
                class="w-full px-4 py-3 rounded-lg bg-white/20 dark:bg-white/10 border border-white/30 dark:border-white/20 text-white placeholder-white/70 dark:placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 dark:focus:ring-white/40 resize-none transition-colors duration-200"
              ></textarea>
              <div class="absolute bottom-2 right-2 text-xs text-white/60" id="char-counter">0/500</div>
            </div>
          </div>
          <p class="text-sm text-white/80 mb-4">Todos los campos son obligatorios</p>
          <div class="flex items-start mb-4">
            <div class="flex items-center h-5">
              <input
                id="privacy-checkbox"
                name="privacy-consent"
                type="checkbox"
                required
                class="w-4 h-4 border border-white/30 rounded bg-white/20 focus:ring-2 focus:ring-white/50 transition-colors duration-200"
              />
            </div>
            <label for="privacy-checkbox" class="ml-2 text-sm">
              Acepto el uso de mis datos para ser contactado en relación con la beta de Maingoo, según la <a href="/politica-privacidad" class="underline hover:text-white/80">Política de Privacidad</a>
            </label>
          </div>
          <button 
            id="submit-button"
            type="submit"
            class="w-full bg-white text-blue-600 py-4 rounded-lg text-lg font-semibold hover:shadow-xl transition-all transform hover:-translate-y-1"
          >
            Enviar Mensaje
          </button>
        </form>
      </div>
    </div>
  </div>
</section>