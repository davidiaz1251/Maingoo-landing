---
const features = [
  {
    id: 1,
    title: "Carga Automática de Facturas",
    description: "Olvídate de teclear datos: sube tus facturas y albaranes y en segundos tendrás todo registrado, sin errores.",
    gradient: "from-blue-50 to-blue-100",
    darkGradient: "dark:from-blue-900/30 dark:to-blue-800/30",
    iconGradient: "from-blue-600 to-blue-700",
    expandedContent: {
      video: "/videos/facturacion-demo.mp4",
      // Video sugerido:
      // Un usuario arrastra un PDF de una factura al sistema → la IA procesa en segundos → 
      // aparecen los campos rellenados automáticamente (proveedor, fecha, IVA, total) → 
      // se guarda en un dashboard organizado.
      description: "Nuestro sistema de análisis de documentos con IA extrae automáticamente toda la información de tus facturas y albaranes: fechas, importes, impuestos y conceptos clave. Todo queda digitalizado y organizado al instante.",
      features: [
        "Reconocimiento automático de proveedores",
        "Validación automática de importes",
        "Detección de duplicados",
        "Archivo digital organizado y seguro",
        "Clasificación automatica de productos y categorías",
        "Integración directa con inventario y costes"
      ]
    }
  },
  {
    id: 2,
    title: "Análisis Predictivo",
    description: "Anticípate: ajusta inventario, prevé ventas y detecta tendencias antes que tu competencia.",
    gradient: "from-purple-50 to-purple-100",
    darkGradient: "dark:from-purple-900/30 dark:to-purple-800/30",
    iconGradient: "from-purple-600 to-purple-700",
    expandedContent: {
      video: "/videos/analisis-demo.mp4",
      // Video sugerido:
      // Gráfico de ventas que se actualiza automáticamente → la IA proyecta una curva de demanda futura → 
      // aparecen alertas de “más stock en verano” o “baja demanda en invierno” → 
      // cierre con un panel de recomendaciones.
      description: "Nuestra IA aprende de tu negocio y te da predicciones claras sobre ventas, temporadas y consumo. Podrás saber qué se venderá más, cuándo pedir y cómo evitar quedarte corto o con exceso de stock.",
      features: [
        "Predicción de ventas por temporada",
        "Optimización de niveles de stock",
        "Identificación de patrones de compra",
        "Recomendaciones personalizadas",
        "Alertas de picos de demanda",
        "Sugerencias de ofertas y promociones"
      ]
    }
  },
  {
    id: 3,
    title: "Inventario Inteligente",
    description: "Controla el stock en tiempo real con alertas y sugerencias de pedidos.",
    gradient: "from-green-50 to-green-100",
    darkGradient: "dark:from-green-900/30 dark:to-green-800/30",
    iconGradient: "from-green-600 to-green-700",
    expandedContent: {
      video: "/videos/inventario-demo.mp4",
      // Video sugerido:
      // Vista de almacén con productos → el sistema marca en rojo los que están bajos → 
      // se genera una alerta automática → el sistema propone un pedido óptimo → 
      // aparece un check de confirmación de pedido.
      description: "Mantén un control total sobre tu inventario con actualizaciones en tiempo real y gestión automatizada. El sistema aprende de tus patrones de venta para sugerir pedidos óptimos y prevenir roturas de stock.",
      features: [
        "Monitorización en tiempo real",
        "Alertas de stock bajo",
        "Sugerencias de reposición",
        "Gestión multi-almacén integrada",
        "Control de caducidades y mermas",
        "Actualización automática tras ventas y recepciones"
      ]
    }
  },
  {
    id: 4,
    title: "Maingoo IA",
    description: "Pregunta lo que quieras sobre tu negocio y obtén la respuesta al instante, como si hablaras con tu propio consultor.",
    gradient: "from-orange-50 to-orange-100",
    darkGradient: "dark:from-orange-900/30 dark:to-orange-800/30",
    iconGradient: "from-orange-600 to-orange-700",
    expandedContent: {
      video: "/videos/reportes-demo.mp4",
      // Video sugerido:
      // Un usuario abre el chat y escribe: “¿Cuánto gasté en carne este mes?” → 
      // el sistema responde con una cifra y un gráfico → el usuario pide “Compárame con el mes pasado” → 
      // aparece el gráfico comparativo con recomendación breve.
      description: "Maingoo incluye un chat integrado que entiende tus preguntas en lenguaje natural. Puedes pedir cifras, comparativas o explicaciones y el sistema responde con claridad, gráficos o recomendaciones prácticas. Toma decisiones rápidas con informes automáticos y fáciles de entender. Visualiza costes, márgenes y beneficios de un solo vistazo. Nunca había sido tan fácil gestionar un negocio de hostelería.",
      features: [
        "Respuestas inmediatas en lenguaje natural",
        "Métricas clave de rendimiento",
        "Dashboards interactivos",
        "Informes programados automáticos o bajo demanda",
        "Interacción accesible desde cualquier módulo de la app",
        "Recomendaciones prácticas basadas en tus datos"
      ]
    }
  },
  {
    id: 5,
    title: "Optimización de Costes",
    description: "Detecta oportunidades de ahorro y mejora tus márgenes de manera más efectiva.",
    gradient: "from-red-50 to-red-100",
    darkGradient: "dark:from-red-900/30 dark:to-red-800/30",
    iconGradient: "from-red-600 to-red-700",
    expandedContent: {
      video: "/videos/costes-demo.mp4",
      // Video sugerido:
      // El sistema muestra un gráfico de gastos por categorías → 
      // resalta en rojo “Carne: +20% más cara con tu proveedor actual” → 
      // aparece una comparativa de proveedores → se marca una sugerencia de ahorro estimado.
      description: "Identifica y aprovecha oportunidades de ahorro con nuestro sistema de optimización de costes. Analiza gastos, compara proveedores y maximiza tus márgenes de beneficio de forma inteligente.",
      features: [
        "Análisis de gastos por categoría",
        "Detección de gastos innecesarios",
        "Seguimiento de ahorros conseguidos",
        "Comparativa inteligente de proveedores",
        "Negociación sugerida con proveedores",
        "Alertas de productos con sobrecostes"
      ]
    }
  },
  {
    id: 6,
    title: "Integración Total",
    description: "Todo en un solo sistema: TPV, horarios, inventario y facturación, sin depender de otras plataformas.",
    gradient: "from-indigo-50 to-indigo-100",
    darkGradient: "dark:from-indigo-900/30 dark:to-indigo-800/30",
    iconGradient: "from-indigo-600 to-indigo-700",
    expandedContent: {
      video: "/videos/integracion-demo.mp4",
      // Video sugerido:
      // Animación que conecta módulos: TPV → Inventario → Facturación → Horarios 
      // → al registrar una venta en el TPV, se descuenta el stock automáticamente y se actualiza un informe → 
      // cierre con un panel central que muestra todo unido.
      description: "Maingoo integra de forma nativa todos los procesos de tu negocio en un único lugar: TPV, inventario, horarios, proveedores, facturación, pedidos online... No necesitas apps externas ni sistemas complicados: todo está conectado automáticamente, ahorrándote trabajo y errores.",
      features: [
        "TPV integrado",
        "Gestión de horarios y turnos en la misma plataforma",
        "Sincronización con plataformas de delivery",
        "Facturación, costes y proveedores todo en uno",
        "Pedidos online centralizados",
        "Sincronización automática entre módulos (ventas → stock → informes)"
      ]
    }
  }
];
---

<section id="features" class="relative pt-12 pb-12 bg-white dark:bg-gray-900">
  <div class="container mx-auto px-6">
    <!-- Section Header -->
    <div class="text-center max-w-3xl mx-auto mb-10">
      <h2 class="text-3xl md:text-5xl font-bold text-gray-800 dark:text-white mb-6">
        Características que 
        <span class="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
          transforman
        </span>
        tu negocio
      </h2>
    </div>

    <script>
      interface HTMLFeatureElement extends HTMLElement {
        dataset: {
          featureId: string;
        };
      }

      // Estado para controlar qué feature está expandida
      let expandedFeature: string | null = null;

      // Función para expandir/contraer features
      function toggleFeature(featureId: string): void {
        const features = document.querySelectorAll<HTMLFeatureElement>('.feature-card');
        const grid = document.querySelector('.features-grid');
        
        if (!grid) return;

        const targetFeature = Array.from(features).find(f => f.dataset.featureId === featureId);
        if (!targetFeature) return;

        if (expandedFeature === featureId) {
          // Contraer
          expandedFeature = null;
          grid.classList.remove('has-expanded');
          
          features.forEach(f => {
            f.classList.remove('expanded');
            f.classList.add('hover:shadow-xl');
            const normalContent = f.querySelector('.feature-normal');
            const expandedContent = f.querySelector('.expanded-content');
            if (normalContent) normalContent.classList.remove('hidden');
            if (expandedContent) expandedContent.classList.add('hidden');

            // Restaurar posición original
            const originalOrder = parseInt(f.dataset.featureId) - 1;
            f.style.order = '';
          });

          // Scroll suave hacia la posición original
          targetFeature.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        } else {
          // Expandir
          expandedFeature = featureId;
          grid.classList.add('has-expanded');

          // Reordenar las features
          features.forEach(f => {
            if (f.dataset.featureId === featureId) {
              f.classList.add('expanded');
              f.classList.remove('hover:shadow-xl');
              f.style.order = '0'; // Siempre primero
              const normalContent = f.querySelector('.feature-normal');
              const expandedContent = f.querySelector('.expanded-content');
              if (normalContent) normalContent.classList.add('hidden');
              if (expandedContent) expandedContent.classList.remove('hidden');
            } else {
              f.classList.remove('expanded');
              f.style.order = (parseInt(f.dataset.featureId) + 1).toString();
            }
          });

          // Scroll suave hacia la feature expandida
          targetFeature.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      }

      // Agregar event listeners
      document.addEventListener('DOMContentLoaded', () => {
        // Event listener para clicks en las tarjetas
        document.querySelectorAll<HTMLFeatureElement>('.feature-card').forEach(card => {
          card.addEventListener('click', (e: Event) => {
            const target = e.target as HTMLElement;
            if (target && !target.closest('.close-button')) {
              toggleFeature(card.dataset.featureId);
            }
          });
        });

        // Event listener para el botón de cerrar
        document.querySelectorAll('.close-button').forEach(button => {
          button.addEventListener('click', (e: Event) => {
            e.stopPropagation();
            if (expandedFeature) {
              toggleFeature(expandedFeature);
            }
          });
        });

        // Event listener para cerrar al hacer clic fuera
        document.addEventListener('click', (e: Event) => {
          if (expandedFeature) {
            const target = e.target as HTMLElement;
            const expandedCard = document.querySelector('.feature-card.expanded');
            
            // Si el clic fue fuera de la tarjeta expandida
            if (expandedCard && !expandedCard.contains(target)) {
              toggleFeature(expandedFeature);
            }
          }
        });

        // Prevenir que los clicks dentro de la tarjeta expandida se propaguen al documento
        document.querySelectorAll('.feature-card').forEach(card => {
          card.addEventListener('click', (e: Event) => {
            e.stopPropagation();
          });
        });
      });
    </script>

    <style>
      .features-grid {
        min-height: 600px;
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 2rem;
        position: relative;
      }

      /* Grid cuando hay una tarjeta expandida */
      .features-grid.has-expanded {
        display: grid;
        grid-template-columns: minmax(300px, 1fr) 4fr !important;
        grid-template-rows: repeat(5, 1fr);
        gap: 1rem !important;
        align-items: center;
      }

      .feature-card {
        transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        transform-origin: center;
        height: 100%;
        opacity: 1;
        grid-column: span 1;
        position: relative;
      }



      .feature-card.expanded {
        grid-column: 2;
        grid-row: 1 / span 5;
        width: 100%;
        position: relative;
        min-height: 300px;
        z-index: 20;
        box-sizing: border-box;
      }

      .features-grid.has-expanded .feature-card:not(.expanded) {
        grid-column: 1;
        padding: 1.5rem;
        background: rgba(241, 245, 249, 0.9);
        display: flex;
        align-items: center;
        min-height: 70px;
        transition: all 0.3s ease;
        margin-bottom: 0.5rem;
        width: 100%;
        border: 1px solid rgba(148, 163, 184, 0.3);
        border-radius: 1rem;
        backdrop-filter: blur(8px);
        cursor: pointer;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      }

      .dark .features-grid.has-expanded .feature-card:not(.expanded) {
        background: rgba(31, 41, 55, 0.1);
        border-color: rgba(75, 85, 99, 0.2);
        box-shadow: none;
      }

      .features-grid.has-expanded .feature-card:not(.expanded) h3 {
        @apply text-gray-900;
      }

      .dark .features-grid.has-expanded .feature-card:not(.expanded) h3 {
        @apply text-white;
      }

      .features-grid.has-expanded .feature-card:not(.expanded):hover {
        transform: translateY(-0.5rem) scale(1.02);
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 0 15px -3px rgba(59, 130, 246, 0.2);
        background: rgba(255, 255, 255, 0.95);
        border-color: rgba(59, 130, 246, 0.3);
      }

      .dark .features-grid.has-expanded .feature-card:not(.expanded):hover {
        background: rgba(31, 41, 55, 0.2);
        border-color: rgba(75, 85, 99, 0.3);
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.2), 0 0 15px -3px rgba(59, 130, 246, 0.3);
      }

      /* Efecto de brillo para las tarjetas no expandidas */
      .features-grid.has-expanded .feature-card:not(.expanded)::before {
        content: '';
        position: absolute;
        inset: 0;
        background: linear-gradient(to right, transparent, rgba(255, 255, 255, 0.1), transparent);
        opacity: 0;
        transition: opacity 0.5s ease;
        border-radius: 1rem;
        background-size: 200% 100%;
      }

      .features-grid.has-expanded .feature-card:not(.expanded):hover::before {
        opacity: 1;
        animation: shine 8s ease infinite;
      }

      /* Estilo para las features no expandidas */
      .features-grid.has-expanded .feature-card:not(.expanded) .feature-normal {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        width: 100%;
      }

      .features-grid.has-expanded .feature-card:not(.expanded) .feature-normal > div {
        width: 40px;
        height: 40px;
        min-width: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 0.75rem;
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(4px);
        transition: all 0.3s ease;
      }

      .features-grid.has-expanded .feature-card:not(.expanded):hover .feature-normal > div {
        background: rgba(255, 255, 255, 0.3);
        transform: scale(1.1);
      }

      /* Ajustar el texto en las tarjetas minimizadas */
      .features-grid.has-expanded .feature-card:not(.expanded) h3 {
        font-size: 1rem;
        font-weight: 600;
        margin: 0 0 0 1rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        @apply !text-white;
        transition: all 0.3s ease;
      }

      .features-grid.has-expanded .feature-card:not(.expanded):hover h3 {
        text-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
      }

      .features-grid.has-expanded .feature-card:not(.expanded) .feature-normal svg {
        width: 28px;
        height: 28px;
      }

      .features-grid.has-expanded .feature-card:not(.expanded) .feature-normal h3 {
        display: block;
        margin: 0;
        font-size: 1rem;
        font-weight: 600;
        color: rgb(17 24 39);
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }

      /* Mantener bordes de colores en las tarjetas minimizadas */
      .features-grid.has-expanded .feature-card:not(.expanded) {
      }

      .features-grid.has-expanded .feature-card:not(.expanded) .feature-normal p {
        display: none;
      }

      .features-grid.has-expanded .feature-card:not(.expanded):hover .feature-normal h3 {
        color: rgb(17 24 39);
      }

      .feature-card .feature-normal,
      .feature-card .expanded-content {
        transition: all 0.3s ease-in-out;
      }

      .feature-card .expanded-content {
        opacity: 0;
        height: 0;
        overflow: hidden;
      }

      .feature-card.expanded .expanded-content {
        opacity: 1;
        height: auto;
        padding: 0;
      }

      .feature-card:not(.expanded) {
        transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
      }

      .close-button {
        transition: all 0.2s ease-in-out;
        opacity: 0;
        visibility: hidden;
      }

      .feature-card.expanded .close-button {
        opacity: 1;
        visibility: visible;
      }

      .close-button:hover {
        transform: scale(1.1);
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      @keyframes shine {
        from {
          background-position: -200% 0;
        }
        to {
          background-position: 200% 0;
        }
      }

      .animate-shine {
        animation: shine 8s ease infinite;
      }
    </style>
    
    <!-- Features Grid -->
    <div class="features-grid grid grid-cols-3 grid-rows-2 gap-x-6 gap-y-6 relative">
      {features.slice(0, 6).map((feature) => (
        <div
          class={`feature-card bg-white/10 dark:bg-gray-800/10 backdrop-blur-sm border border-gray-200/20 dark:border-gray-700/20 p-6 rounded-2xl transition-all duration-300 group cursor-pointer relative z-10 hover:bg-white/20 dark:hover:bg-gray-800/20 hover:-translate-y-2 hover:scale-[1.02] hover:shadow-2xl hover:shadow-blue-500/20 before:absolute before:inset-0 before:rounded-2xl before:bg-gradient-to-r before:from-transparent before:via-white/5 before:to-transparent before:opacity-0 hover:before:opacity-100 before:transition-opacity before:duration-500 before:bg-[length:200%_100%] hover:before:animate-shine overflow-hidden [&.expanded]:hover:bg-white/10 [&.expanded]:hover:translate-y-0 [&.expanded]:hover:scale-100 [&.expanded]:hover:shadow-none [&.expanded]:hover:before:opacity-0 [&.expanded]:before:animate-none`}
          data-feature-id={feature.id}
        >
          <!-- Contenido normal -->
          <div class="feature-normal">
            <h3 class="text-2xl font-bold text-gray-900 dark:!text-white mb-4">{feature.title}</h3>
            <p class="text-gray-700 dark:!text-white leading-relaxed">
              {feature.description}
            </p>
          </div>

          <!-- Contenido expandido -->
          <div class="expanded-content hidden">
            <div class="w-full h-full relative p-0">
              <div class="flex flex-col gap-4">
                <!-- Sección superior: título, descripción y video -->
                <div class="grid grid-cols-2 gap-6">
                  <div class="space-y-6">
                    <h4 class="text-4xl font-bold !text-gray-800 dark:!text-white">{feature.title}</h4>
                    <p class="text-xl !text-gray-600 dark:!text-gray-300 leading-relaxed">
                      {feature.expandedContent.description}
                    </p>
                  </div>
                  <div class="rounded-2xl overflow-hidden aspect-[16/9]">
                    {feature.expandedContent.video && (
                      <video
                        class="w-full h-full object-contain"
                        controls
                        poster="/images/features/demo-poster.jpg"
                      >
                        <source src={feature.expandedContent.video} type="video/mp4" />
                        Tu navegador no soporta el elemento de video.
                      </video>
                    )}
                  </div>
                </div>

                <!-- Grid 2x2 de características -->
                <div class="grid grid-cols-2 gap-4 mt-4">
                  {feature.expandedContent.features.map((item) => (
                    <div class="rounded-lg p-4 bg-white/5 dark:bg-gray-800/10 backdrop-blur-sm">
                      <div class="flex items-start space-x-3">
                        <svg class="w-6 h-6 !text-green-500 mt-1 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                        <span class="text-lg !text-gray-600 dark:!text-gray-300">{item}</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>
