---
---

<header class="fixed top-0 w-full z-50 bg-white/90 dark:bg-gray-900/90 backdrop-blur-md border-b border-gray-100 dark:border-gray-800">
  <nav class="container mx-auto px-4 sm:px-6 lg:px-8 py-3 sm:py-4 lg:py-5">
    <div class="flex items-center justify-between">
      <!-- Logo -->
      <div class="flex items-center space-x-2">
        <img 
          src="/maingoo_logo.svg" 
          alt="Maingoo Logo" 
          class="h-8 w-8 sm:h-10 sm:w-10 lg:h-12 lg:w-12 object-contain"
        />
        <a href="#" class="text-lg sm:text-xl lg:text-2xl font-bold text-gray-800 dark:text-white hover:text-blue-600 dark:hover:text-blue-400 transition-colors">Maingoo</a>
      </div>
      
      <!-- Navigation Links -->
      <div class="hidden lg:flex items-center space-x-6 xl:space-x-8">
        <a href="#features" class="text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors text-sm xl:text-base whitespace-nowrap">Características</a>
        <a href="#benefits" class="text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors text-sm xl:text-base whitespace-nowrap">Beneficios</a>
        <a href="#pricing" class="text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors text-sm xl:text-base whitespace-nowrap">Precios</a>
        <a href="#contact" class="text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors text-sm xl:text-base whitespace-nowrap">Contacto</a>
      </div>
      
      <!-- Dark Mode Toggle & CTA Buttons -->
      <div class="flex items-center space-x-2 sm:space-x-3 lg:space-x-4">
        <!-- Dark Mode Toggle Button -->
        <button 
          id="dark-mode-toggle" 
          class="p-2 rounded-lg bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 transition-all duration-300 relative group"
          aria-label="Cambiar modo oscuro"
          title="Clic para alternar • Doble clic para seguir sistema"
        >
          <!-- Sun Icon (for dark mode) -->
          <svg id="sun-icon" class="w-5 h-5 hidden" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd"></path>
          </svg>
          <!-- Moon Icon (for light mode) -->
          <svg id="moon-icon" class="w-5 h-5 block" fill="currentColor" viewBox="0 0 20 20">
            <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
          </svg>
          
          <!-- System indicator dot -->
          <div id="system-indicator" class="absolute -top-1 -right-1 w-2 h-2 bg-blue-500 rounded-full hidden opacity-75"></div>
        </button>
        
        <button class="hidden lg:block text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors text-sm xl:text-base font-medium">
          Iniciar Sesión
        </button>
      </div>
      
      <!-- Mobile Menu Button -->
      <button class="lg:hidden p-2 text-gray-600 dark:text-gray-300" id="mobile-menu-button">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>
    
    <!-- Mobile Menu -->
    <div id="mobile-menu" class="lg:hidden hidden bg-white/95 dark:bg-gray-900/95 backdrop-blur-md border-t border-gray-100 dark:border-gray-800">
      <div class="px-4 py-4 space-y-4">
        <a href="#features" class="block text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors py-2">Características</a>
        <a href="#benefits" class="block text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors py-2">Beneficios</a>
        <a href="#pricing" class="block text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors py-2">Precios</a>
        <a href="#contact" class="block text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors py-2">Contacto</a>
        <div class="pt-4 border-t border-gray-200 dark:border-gray-700">
          <button class="block w-full text-left text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors py-2 font-medium">
            Iniciar Sesión
          </button>
        </div>
      </div>
    </div>
  </nav>
</header>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Dark Mode Toggle Functionality
    const darkModeToggle = document.getElementById('dark-mode-toggle');
    const sunIcon = document.getElementById('sun-icon');
    const moonIcon = document.getElementById('moon-icon');
    const systemIndicator = document.getElementById('system-indicator');
    
    // Function to update icon visibility
    function updateIcons(isDark: boolean) {
      if (sunIcon && moonIcon) {
        if (isDark) {
          // Show sun icon when in dark mode (clicking it will go to light mode)
          sunIcon.classList.remove('hidden');
          moonIcon.classList.add('hidden');
        } else {
          // Show moon icon when in light mode (clicking it will go to dark mode)
          sunIcon.classList.add('hidden');
          moonIcon.classList.remove('hidden');
        }
      }
    }
    
    // Function to update system indicator
    function updateSystemIndicator() {
      if (systemIndicator) {
        if (hasUserPreference()) {
          systemIndicator.classList.add('hidden');
        } else {
          systemIndicator.classList.remove('hidden');
        }
      }
    }
    
    // Function to apply dark mode
    function applyDarkMode(isDark: boolean, source: string = 'manual') {
      const htmlElement = document.documentElement;
      
      if (isDark) {
        htmlElement.classList.add('dark');
      } else {
        htmlElement.classList.remove('dark');
      }
      
      // Only save to localStorage if it's a manual change
      if (source === 'manual') {
        localStorage.setItem('darkMode', isDark.toString());
      }
      
      // Update icons and system indicator
      updateIcons(isDark);
      updateSystemIndicator();
      
      console.log(`Dark mode applied: ${isDark} (source: ${source})`);
    }
    
    // Function to check if user has set a manual preference
    function hasUserPreference() {
      return localStorage.getItem('darkMode') !== null;
    }
    
    // Function to clear user preference (to follow system)
    function clearUserPreference() {
      localStorage.removeItem('darkMode');
      console.log('User preference cleared - now following system');
    }
    
    // Function to sync with system preference
    function syncWithSystem() {
      const systemDark = getSystemDarkMode();
      applyDarkMode(systemDark, 'system');
      console.log('Synced with system preference:', systemDark);
    }
    
    // Function to get current dark mode state
    function getCurrentDarkMode() {
      return document.documentElement.classList.contains('dark');
    }
    
    // Function to check system preference
    function getSystemDarkMode() {
      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
      const systemIsDark = mediaQuery.matches;
      console.log('System preference check:', {
        query: '(prefers-color-scheme: dark)',
        matches: systemIsDark,
        media: mediaQuery.media,
        rawMediaQuery: mediaQuery
      });
      return systemIsDark;
    }
    
    // Initialize dark mode based on localStorage or system preference
    function initializeDarkMode() {
      const savedMode = localStorage.getItem('darkMode');
      console.log('Initialization - Saved mode from localStorage:', savedMode);
      
      let isDark = false;
      let source = 'system';
      
      if (savedMode !== null) {
        // Use saved preference
        isDark = savedMode === 'true';
        source = 'saved';
        console.log('Using saved preference:', isDark);
      } else {
        // Use system preference
        const systemPreference = getSystemDarkMode();
        isDark = systemPreference;
        source = 'system';
        console.log('No saved preference found, using system preference:', isDark);
      }
      
      console.log('Final initialization decision:', { isDark, source });
      applyDarkMode(isDark, source);
    }
    
    // Initialize dark mode on page load
    initializeDarkMode();
    
    // Debug function - available globally for testing
    (window as any).debugDarkMode = function() {
      console.log('=== DEBUG DARK MODE ===');
      console.log('Current HTML classes:', document.documentElement.className);
      console.log('localStorage darkMode:', localStorage.getItem('darkMode'));
      console.log('System preference (dark):', window.matchMedia('(prefers-color-scheme: dark)').matches);
      console.log('System preference (light):', window.matchMedia('(prefers-color-scheme: light)').matches);
      console.log('Has user preference:', hasUserPreference());
      console.log('Current dark mode state:', getCurrentDarkMode());
      
      // Test system detection
      const darkQuery = window.matchMedia('(prefers-color-scheme: dark)');
      const lightQuery = window.matchMedia('(prefers-color-scheme: light)');
      console.log('Dark query object:', darkQuery);
      console.log('Light query object:', lightQuery);
      console.log('======================');
    };
    
    // Function to reset everything and follow system
    (window as any).resetToSystem = function() {
      console.log('Resetting to system preference...');
      clearUserPreference();
      syncWithSystem();
      (window as any).debugDarkMode();
    };
    
    // Run debug on initialization
    (window as any).debugDarkMode();
    
    // Dark mode toggle event listener
    if (darkModeToggle) {
      darkModeToggle.addEventListener('click', (e) => {
        e.preventDefault();
        const currentDarkMode = getCurrentDarkMode();
        const newDarkMode = !currentDarkMode;
        
        // Apply the new mode and save as user preference
        applyDarkMode(newDarkMode, 'manual');
        
        console.log('Manual toggle - Current:', currentDarkMode, 'New:', newDarkMode);
      });
      
      // Add double-click to reset to system preference
      darkModeToggle.addEventListener('dblclick', (e) => {
        e.preventDefault();
        
        // Clear user preference and sync with system
        clearUserPreference();
        syncWithSystem();
        
        console.log('Reset to system preference via double-click');
      });
    }
    
    // Listen for system theme changes and sync automatically
    const systemMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    systemMediaQuery.addEventListener('change', (e) => {
      console.log('System theme changed to:', e.matches ? 'dark' : 'light');
      
      // Only auto-sync if user hasn't set a manual preference
      if (!hasUserPreference()) {
        applyDarkMode(e.matches, 'system-auto');
        console.log('Auto-synced with system change');
      } else {
        console.log('User has manual preference, not auto-syncing');
      }
    });

    // Mobile Menu Functionality
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        // Toggle mobile menu visibility
        mobileMenu.classList.toggle('hidden');
        
        // Change hamburger icon to X when menu is open
        const svg = mobileMenuButton.querySelector('svg');
        if (svg) {
          const path = svg.querySelector('path');
          if (path) {
            if (mobileMenu.classList.contains('hidden')) {
              // Hamburger icon
              path.setAttribute('d', 'M4 6h16M4 12h16M4 18h16');
            } else {
              // X icon
              path.setAttribute('d', 'M6 18L18 6M6 6l12 12');
            }
          }
        }
      });
      
      // Close menu when clicking on links
      const mobileMenuLinks = mobileMenu.querySelectorAll('a');
      mobileMenuLinks.forEach(link => {
        link.addEventListener('click', () => {
          mobileMenu.classList.add('hidden');
          // Reset to hamburger icon
          const svg = mobileMenuButton.querySelector('svg');
          if (svg) {
            const path = svg.querySelector('path');
            if (path) {
              path.setAttribute('d', 'M4 6h16M4 12h16M4 18h16');
            }
          }
        });
      });
      
      // Close menu when clicking outside
      document.addEventListener('click', (event) => {
        const target = event.target as Node;
        if (target && !mobileMenuButton.contains(target) && !mobileMenu.contains(target)) {
          mobileMenu.classList.add('hidden');
          // Reset to hamburger icon
          const svg = mobileMenuButton.querySelector('svg');
          if (svg) {
            const path = svg.querySelector('path');
            if (path) {
              path.setAttribute('d', 'M4 6h16M4 12h16M4 18h16');
            }
          }
        }
      });
    }
  });
</script>
